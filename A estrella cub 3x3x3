import pandas as pd
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
import numpy as np
%matplotlib inline

import copy
import time
import operator
import random
import itertools
import csv
import joblib  
from csv import writer

#Funció que permet transformar un estat de colors barrejats, a vector de 48 components.

def TransformState(Cube):
    State=list(range(48))
    
    #Vertexs
    for i,j,z in zip ([0,2,5,7,40,42,47,13],[8,32,16,24,15,23,31,45],[34,26,10,18,21,29,37,39]):
        if Cube[i]=='W':
            if Cube[j]=='O': State[i]=0; State[j]=8; State[z]=34
            elif Cube[j]=='B': State[i]=2; State[j]=32; State[z]=26
            elif Cube[j]=='G': State[i]=5; State[j]=16; State[z]=10
            else: State[i]=7; State[j]=24; State[z]=18
        elif  Cube[i]=='G':
            if Cube[j]=='O': State[i]=16; State[j]=10; State[z]=5
            elif Cube[j]=='W': State[i]=18; State[j]=7; State[z]=24
            elif Cube[j]=='Y': State[i]=21; State[j]=40; State[z]=15
            else: State[i]=23; State[j]=29; State[z]=42
        elif Cube[i]=='O':
            if Cube[j]=='Y': State[i]=13; State[j]=45; State[z]=39
            elif Cube[j]=='G': State[i]=15; State[j]=21; State[z]=40
            elif Cube[j]=='B': State[i]=8; State[j]=34; State[z]=0
            else: State[i]=10; State[j]=5; State[z]=16
        elif Cube[i]=='B':
            if Cube[j]=='O': State[i]=39; State[j]=13; State[z]=45
            elif Cube[j]=='Y': State[i]=37; State[j]=47; State[z]=31
            elif Cube[j]=='W': State[i]=34; State[j]=0; State[z]=8
            else: State[i]=32; State[j]=26; State[z]=2
        elif Cube[i]=='R':
            if Cube[j]=='W': State[i]=26; State[j]=2; State[z]=32
            elif Cube[j]=='G': State[i]=24; State[j]=18; State[z]=7
            elif Cube[j]=='B': State[i]=31; State[j]=37; State[z]=47
            else: State[i]=29; State[j]=42; State[z]=23
        else:
            if Cube[j]=='O': State[i]=40; State[j]=15; State[z]=21
            elif Cube[j]=='B': State[i]=45; State[j]=39; State[z]=13
            elif Cube[j]=='G': State[i]=42; State[j]=23; State[z]=29
            else: State[i]=47; State[j]=31; State[z]=37
                
    #Arestes
    for i,j in zip ([1,3,6,4,19,20,28,11,22,30,46,14],[33,9,17,25,12,27,35,36,41,44,38,43]):
        if Cube[i]=='W':
            if Cube[j]=='B': State[i]=1; State[j]=33
            elif Cube[j]=='R': State[i]=4; State[j]=25
            elif Cube[j]=='G': State[i]=6; State[j]=17
            else: State[i]=3; State[j]=9
        elif Cube[i]=='G':
            if Cube[j]=='W': State[i]=17; State[j]=6
            elif Cube[j]=='R': State[i]=20; State[j]=27
            elif Cube[j]=='O': State[i]=19; State[j]=12
            else: State[i]=22; State[j]=41
        elif Cube[i]=='R':
            if Cube[j]=='W': State[i]=25; State[j]=4
            elif Cube[j]=='G': State[i]=27; State[j]=20
            elif Cube[j]=='B': State[i]=28; State[j]=35
            else: State[i]=30; State[j]=44
        elif Cube[i]=='B':
            if Cube[j]=='W': State[i]=33; State[j]=1
            elif Cube[j]=='R': State[i]=35; State[j]=28
            elif Cube[j]=='O': State[i]=36; State[j]=11
            else: State[i]=38; State[j]=46
        elif Cube[i]=='O':
            if Cube[j]=='W': State[i]=9; State[j]=3
            elif Cube[j]=='G': State[i]=12; State[j]=19
            elif Cube[j]=='B': State[i]=11; State[j]=36
            else: State[i]=14; State[j]=43
        else:
            if Cube[j]=='R': State[i]=44; State[j]=30
            elif Cube[j]=='G': State[i]=41; State[j]=22
            elif Cube[j]=='B': State[i]=46; State[j]=38
            else: State[i]=43; State[j]=14
    return(State)
    
#Funcions que donat un estat, li apliquen el seu gir corresponent.

PUH = [5,3,0,6,1,7,4,2,16,17,18,11,12,13,14,15,24,25,26,19,20,21,22,23,32,33,34,27,28,29,30,31,8,9,10,35,36,37,38,39,40,41,42,43,44,45,46,47]
PUA = [2,4,7,1,6,0,3,5,32,33,34,11,12,13,14,15,8,9,10,19,20,21,22,23,16,17,18,27,28,29,30,31,24,25,26,35,36,37,38,39,40,41,42,43,44,45,46,47]
PRH = [0,1,18,3,20,5,6,23,8,9,10,11,12,13,14,15,16,17,42,19,44,21,22,47,29,27,24,30,25,31,28,26,7,33,34,4,36,2,38,39,40,41,37,43,35,45,46,32]
PRA = [0,1,37,3,35,5,6,32,8,9,10,11,12,13,14,15,16,17,2,19,4,21,22,7,26,28,31,25,30,24,27,29,47,33,34,44,36,42,38,39,40,41,18,43,20,45,46,23]
PFH = [0,1,2,3,4,15,12,10,8,9,40,11,41,13,14,42,21,19,16,22,17,23,20,18,5,25,26,6,28,7,30,31,32,33,34,35,36,37,38,39,29,27,24,43,44,45,46,47]
PFA = [0,1,2,3,4,24,27,29,8,9,7,11,6,13,14,5,18,20,23,17,22,16,19,21,42,25,26,41,28,40,30,31,32,33,34,35,36,37,38,39,10,12,15,43,44,45,46,47]
PLH = [39,1,2,36,4,34,6,7,13,11,8,14,9,15,12,10,0,17,18,3,20,5,22,23,24,25,26,27,28,29,30,31,32,33,45,35,43,37,38,40,16,41,42,19,44,21,46,47]
PLA = [16,1,2,19,4,21,6,7,10,12,15,9,14,8,11,13,40,17,18,43,20,45,22,23,24,25,26,27,28,29,30,31,32,33,5,35,3,37,38,0,39,41,42,36,44,34,46,47]
PDH = [0,1,2,3,4,5,6,7,8,9,10,11,12,37,38,39,16,17,18,19,20,13,14,15,24,25,26,27,28,21,22,23,32,33,34,35,36,29,30,31,45,43,40,46,41,47,44,42]
PDA = [0,1,2,3,4,5,6,7,8,9,10,11,12,21,22,23,16,17,18,19,20,29,30,31,24,25,26,27,28,37,38,39,32,33,34,35,36,13,14,15,42,44,47,41,46,40,43,45]
PBH = [26,28,31,3,4,5,6,7,2,9,10,1,12,0,14,15,16,17,18,19,20,21,22,23,24,25,47,27,46,29,30,45,37,35,32,38,33,39,36,34,40,41,42,43,44,8,11,13]
PBA = [13,11,8,3,4,5,6,7,45,9,10,46,12,47,14,15,16,17,18,19,20,21,22,23,24,25,0,27,1,29,30,2,34,36,39,33,38,32,35,37,40,41,42,43,44,31,28,26]

def UH (Estat,PUH): return [Estat[i] for i in PUH]
def UA (Estat,PUA): return [Estat[i] for i in PUA]
def RH (Estat,PRH): return [Estat[i] for i in PRH]
def RA (Estat,PRA): return [Estat[i] for i in PRA] 
def FH (Estat,PFH): return [Estat[i] for i in PFH]
def FA (Estat,PFA): return [Estat[i] for i in PFA]
def LH (Estat,PLH): return [Estat[i] for i in PLH]
def LA (Estat,PLA): return [Estat[i] for i in PLA]
def DH (Estat,PDH): return [Estat[i] for i in PDH]
def DA (Estat,PDA): return [Estat[i] for i in PDA]
def BH (Estat,PBH): return [Estat[i] for i in PBH]
def BA (Estat,PBA): return [Estat[i] for i in PBA]

#Funcions que expandeixen un estat aplicant tots els seus possibles girs. 

def Expand(Cami):
    Girs = [RA,RH,FA,FH,DA,DH,BA,BH,LA,LH,UA,UH]
    Pers = [PRA,PRH,PFA,PFH,PDA,PDH,PBA,PBH,PLA,PLH,PUA,PUH]
    Movs = ["RA","RH","FA","FH","DA","DH","BA","BH","LA","LH","UA","UH"]
    veins=[(g(Cami,p),m) for g,p,m in zip(Girs,Pers,Movs)]
    return veins
    
def ExpandNodes(Cami):
    Girs = [RA,RH,FA,FH,DA,DH,BA,BH,LA,LH,UA,UH]
    Pers = [PRA,PRH,PFA,PFH,PDA,PDH,PBA,PBH,PLA,PLH,PUA,PUH]
    veins=[ g(Cami,p) for g,p in zip(Girs,Pers)]
    return veins

#Funcions heurístiques.

def Heuristic0(Node):
    return 0

EstatFet=list(range(48))
dis1=ExpandNodes(EstatFet)
NodesDis2=[]
NodesDis3=[]
NodesDis4=[]

#Nodes dis2:
for i in dis1:
    NodesDis2+=ExpandNodes(i)
dis2=[x for x in NodesDis2 if x!=EstatFet]
dis2.sort()
dis2 = list(dis2 for dis2,_ in itertools.groupby(dis2))

#Nodes dis3:
for i in dis2:
    NodesDis3=NodesDis3+ExpandNodes(i)
dis3=[x for x in NodesDis3 if x not in dis1]
dis3.sort()
dis3 = list(dis3 for dis3,_ in itertools.groupby(dis3))

#Nodes dis4:
for i in dis3:
    NodesDis4=NodesDis4+ExpandNodes(i)
dis4=[x for x in NodesDis4 if x not in dis2]
dis4.sort()
dis4 = list(dis4 for dis4,_ in itertools.groupby(dis4))

def HeuristicDis(Node,dis1,dis2,dis3,dis4,EstatFet):
  if Node==EstatFet: return 0
  elif Node in dis1: return 1
  elif Node in dis2: return 2
  elif Node in dis3: return 3
  elif Node in dis4: return 4
  else: return 25

#A estrella

def AStar(EstatIni):
    
    ti = time.time() 
    EstatFinal=list(range(48))
    Oberts=[]
    Tancats=[]
    Tancats.append({"Node":EstatIni,"g":0,"Mov":""})
    
    while EstatFinal!=Tancats[0]["Node"]:
        
        NodeActual=Tancats[0]["Node"]
        E = Expand(NodeActual)
            
        T=[x["Node"] for x in Tancats]
        O=[x["Node"] for x in Oberts]
        gAct=Tancats[0]["g"]   
        for v in E:
            g=gAct+1
            #h=Heuristic0(v[0])
            #h=HeuristicDis(v[0],dis1,dis2,dis3,dis4,EstatFet)
            pred=model.predict(np.array([tf.keras.utils.to_categorical(v[0], num_classes=48)]))
            h=pred[0][0]
            f=h+g
            if v[0] in T:
                indt = [i for i,_ in enumerate(Tancats) if _["Node"] == v[0]][0]
                if g < Tancats[indt]["g"]:
                    Oberts.append({"Node":v[0],"g":g,"f":f,"p":NodeActual,"Mov":v[1]})
                    Tancats.pop(indt)
                    
            elif v[0] not in O:
                Oberts.append({"Node":v[0],"g":g,"f":f,"p":NodeActual,"Mov":v[1]})

            #Si està en els oberts, actualitzar el node en cas que g sigui menor:
            else:
                indo = [i for i,_ in enumerate(Oberts) if _["Node"] == v[0]][0]
                if g < Oberts[indo]["g"]:
                    Oberts[indo]["g"]=g 
                    Oberts[indo]["f"]=f 
                    Oberts[indo]["p"]=NodeActual
                    Oberts[indo]["Mov"]=v[1]
        #Agafa el node d'oberts amb menor f i el mou dels oberts als visitats.
        MinimF = min(Oberts, key=lambda x:x['f'])
        Tancats.insert(0,MinimF)
        Oberts.remove(MinimF)

    Ruta=[]
    Node=Tancats[0]
    Ruta.append(Node["Mov"])
    while Node["Node"]!=EstatIni: 
        ind = [i for i,_ in enumerate(Tancats) if _["Node"] == Node["p"]][0]
        Ruta.append(Tancats[ind]["Mov"])
        Node=Tancats[ind] 
    Ruta.pop()
    Ruta=list(reversed(Ruta))
    tfi = time.time()
    #print("Temps d'execució:",tfi-ti, "segons")
    
    return Ruta
    
    
    
